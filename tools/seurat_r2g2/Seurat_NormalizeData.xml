<tool id="Seurat_NormalizeData" name="NormalizeData" version="@VERSION@-0.0.1">
    <description><![CDATA[Normalize Assay Data]]></description>
    <macros>
        <import>Seurat_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <expand macro="version_command" />
    <command><![CDATA[
        #if "output_r_script" in str( $include_outputs ).split( "," ):
            cp '${Seurat_NormalizeData_script}' '${output_r_script}' &&
        #end if
        Rscript '${Seurat_NormalizeData_script}'
    ]]>
    </command>
    <configfiles>
         <configfile name="Seurat_NormalizeData_script"><![CDATA[#!/usr/bin/env RScript
#set $include_files = str( $include_outputs ).split( "," )
library(Seurat)
#set $___USE_COMMA___ = ""
rval <- NormalizeData(
#if str( $object_type.object_type_selector ) == "True":
${___USE_COMMA___}
                                                         #if str( $object_type.object_type.object_type_selector ) != 'skip':
                                                             #set $___USE_COMMA___ = ","

                                                             #if str( $object_type.object_type.object_type_selector ) == 'dataset':
                                                                 object = readRDS("${object_type.object_type.object}")
                                                             #elif str( $object_type.object_type.object_type_selector ) == 'text':
                                                                 object = "${ object_type.object_type.object }"
                                                             #elif str( $object_type.object_type.object_type_selector ) == 'integer':
                                                                 object = ${ object_type.object_type.object }
                                                             #elif str( $object_type.object_type.object_type_selector ) == 'float':
                                                                 object = ${ object_type.object_type.object }
                                                             #elif str( $object_type.object_type.object_type_selector ) == 'boolean':
                                                                 object = ${ object_type.object_type.object }
                                                             #elif str( $object_type.object_type.object_type_selector ) == 'select':
                                                                 #raise ValueError( 'not implemented' )
                                                                 object = "${ object_type.object_type.object }"
                                                             #elif str( $object_type.object_type.object_type_selector ) == 'NULL':
                                                                 object = NULL
                                                             #end if
                                                         #end if
                                                         
#end if

#if str( $assay_type_type.assay_type_type_selector ) == "True":
${___USE_COMMA___}
                                                         #if str( $assay_type_type.assay_type_type.assay_type_type_selector ) != 'skip':
                                                             #set $___USE_COMMA___ = ","

                                                             #if str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'dataset':
                                                                 assay.type = readRDS("${assay_type_type.assay_type_type.assay_type}")
                                                             #elif str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'text':
                                                                 assay.type = "${ assay_type_type.assay_type_type.assay_type }"
                                                             #elif str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'integer':
                                                                 assay.type = ${ assay_type_type.assay_type_type.assay_type }
                                                             #elif str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'float':
                                                                 assay.type = ${ assay_type_type.assay_type_type.assay_type }
                                                             #elif str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'boolean':
                                                                 assay.type = ${ assay_type_type.assay_type_type.assay_type }
                                                             #elif str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'select':
                                                                 #raise ValueError( 'not implemented' )
                                                                 assay.type = "${ assay_type_type.assay_type_type.assay_type }"
                                                             #elif str( $assay_type_type.assay_type_type.assay_type_type_selector ) == 'NULL':
                                                                 assay.type = NULL
                                                             #end if
                                                         #end if
                                                         
#end if

#if str( $normalization_method_type.normalization_method_type_selector ) == "True":
${___USE_COMMA___}
                                                         #if str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) != 'skip':
                                                             #set $___USE_COMMA___ = ","

                                                             #if str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'dataset':
                                                                 normalization.method = readRDS("${normalization_method_type.normalization_method_type.normalization_method}")
                                                             #elif str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'text':
                                                                 normalization.method = "${ normalization_method_type.normalization_method_type.normalization_method }"
                                                             #elif str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'integer':
                                                                 normalization.method = ${ normalization_method_type.normalization_method_type.normalization_method }
                                                             #elif str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'float':
                                                                 normalization.method = ${ normalization_method_type.normalization_method_type.normalization_method }
                                                             #elif str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'boolean':
                                                                 normalization.method = ${ normalization_method_type.normalization_method_type.normalization_method }
                                                             #elif str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'select':
                                                                 #raise ValueError( 'not implemented' )
                                                                 normalization.method = "${ normalization_method_type.normalization_method_type.normalization_method }"
                                                             #elif str( $normalization_method_type.normalization_method_type.normalization_method_type_selector ) == 'NULL':
                                                                 normalization.method = NULL
                                                             #end if
                                                         #end if
                                                         
#end if

#if str( $scale_factor_type.scale_factor_type_selector ) == "True":
${___USE_COMMA___}
                                                         #if str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) != 'skip':
                                                             #set $___USE_COMMA___ = ","

                                                             #if str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'dataset':
                                                                 scale.factor = readRDS("${scale_factor_type.scale_factor_type.scale_factor}")
                                                             #elif str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'text':
                                                                 scale.factor = "${ scale_factor_type.scale_factor_type.scale_factor }"
                                                             #elif str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'integer':
                                                                 scale.factor = ${ scale_factor_type.scale_factor_type.scale_factor }
                                                             #elif str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'float':
                                                                 scale.factor = ${ scale_factor_type.scale_factor_type.scale_factor }
                                                             #elif str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'boolean':
                                                                 scale.factor = ${ scale_factor_type.scale_factor_type.scale_factor }
                                                             #elif str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'select':
                                                                 #raise ValueError( 'not implemented' )
                                                                 scale.factor = "${ scale_factor_type.scale_factor_type.scale_factor }"
                                                             #elif str( $scale_factor_type.scale_factor_type.scale_factor_type_selector ) == 'NULL':
                                                                 scale.factor = NULL
                                                             #end if
                                                         #end if
                                                         
#end if

#if str( $display_progress_type.display_progress_type_selector ) == "True":
${___USE_COMMA___}
                                                         #if str( $display_progress_type.display_progress_type.display_progress_type_selector ) != 'skip':
                                                             #set $___USE_COMMA___ = ","

                                                             #if str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'dataset':
                                                                 display.progress = readRDS("${display_progress_type.display_progress_type.display_progress}")
                                                             #elif str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'text':
                                                                 display.progress = "${ display_progress_type.display_progress_type.display_progress }"
                                                             #elif str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'integer':
                                                                 display.progress = ${ display_progress_type.display_progress_type.display_progress }
                                                             #elif str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'float':
                                                                 display.progress = ${ display_progress_type.display_progress_type.display_progress }
                                                             #elif str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'boolean':
                                                                 display.progress = ${ display_progress_type.display_progress_type.display_progress }
                                                             #elif str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'select':
                                                                 #raise ValueError( 'not implemented' )
                                                                 display.progress = "${ display_progress_type.display_progress_type.display_progress }"
                                                             #elif str( $display_progress_type.display_progress_type.display_progress_type_selector ) == 'NULL':
                                                                 display.progress = NULL
                                                             #end if
                                                         #end if
                                                         
#end if

)
#if "output_r_dataset" in $include_files:
    saveRDS(rval, file = "${output_r_dataset}", ascii = FALSE, version = 2, compress = TRUE )
#end if

    ]]>
         </configfile>
    </configfiles>
    <inputs>
        
        <conditional name="object_type">
            <param name="object_type_selector" type="boolean" truevalue="True" falsevalue="False" checked="True" label="object: Provide value"/>
            <when value="True">
                
        <conditional name="object_type">
            <param name="object_type_selector" type="select" label="object: type of input">
                <option value="dataset" selected="True">Dataset</option>
                <option value="text" selected="False">Text</option>
                <option value="integer" selected="False">Integer</option>
                <option value="float" selected="False">Integer</option>
                <option value="boolean" selected="False">Boolean</option>
                <option value="skip" selected="False">Skip</option>
                <option value="NULL" selected="False">NULL</option>
                <option value="NA" selected="False">NA</option>
            </param>
            <when value="dataset">
                <param name="object" type="data" format="rds" label="object" help="$object"/>
            </when>
            <when value="text">
                <param name="object" type="text" value="" label="object" help="$object"/>
            </when>
            <when value="integer">
                <param name="object" type="integer" value="" label="object" help="$object"/>
            </when>
            <when value="float">
                <param name="object" type="float" value="" label="object" help="$object"/>
            </when>
            <when value="boolean">
                <param name="object" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="" label="object" help="$object"/>
            </when>
            <when value="skip">
                <!-- Do nothing here -->
            </when>
            <when value="NULL">
                <!-- Do nothing here -->
            </when>
            <when value="NA">
                <!-- Do nothing here -->
            </when>
        </conditional>

            </when>
            <when value="False">
                <!-- Do nothing here -->
            </when>
        </conditional>

        
        <conditional name="assay_type_type">
            <param name="assay_type_type_selector" type="boolean" truevalue="True" falsevalue="False" checked="True" label="assay_type: Provide value"/>
            <when value="True">
                <param name="assay_type" type="text" value="RNA" label="assay.type" help='$assay.type&#10;[1] "RNA"'/>
            </when>
            <when value="False">
                <!-- Do nothing here -->
            </when>
        </conditional>

        
        <conditional name="normalization_method_type">
            <param name="normalization_method_type_selector" type="boolean" truevalue="True" falsevalue="False" checked="True" label="normalization_method: Provide value"/>
            <when value="True">
                <param name="normalization_method" type="text" value="LogNormalize" label="normalization.method" help='$normalization.method&#10;[1] "LogNormalize"'/>
            </when>
            <when value="False">
                <!-- Do nothing here -->
            </when>
        </conditional>

        
        <conditional name="scale_factor_type">
            <param name="scale_factor_type_selector" type="boolean" truevalue="True" falsevalue="False" checked="True" label="scale_factor: Provide value"/>
            <when value="True">
                <param name="scale_factor" type="float" value="10000.0" label="scale.factor" help="$scale.factor&#10;[1] 10000"/>
            </when>
            <when value="False">
                <!-- Do nothing here -->
            </when>
        </conditional>

        
        <conditional name="display_progress_type">
            <param name="display_progress_type_selector" type="boolean" truevalue="True" falsevalue="False" checked="True" label="display_progress: Provide value"/>
            <when value="True">
                <param name="display_progress" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="True" label="display.progress" help="$display.progress&#10;[1] TRUE"/>
            </when>
            <when value="False">
                <!-- Do nothing here -->
            </when>
        </conditional>

        <param name="include_outputs" type="select" multiple="True" label="Datasets to create">
            <option value="output_r_dataset" selected="true">Results in RDS format</option>
            <option value="output_r_script" selected="false">R script</option>
        </param>
    </inputs>
    <outputs>
        <data format="rds" name="output_r_dataset" label="${tool.name} on ${on_string} (RDS)">
            <filter>"output_r_dataset" in include_outputs</filter>
        </data>
        <data format="txt" name="output_r_script" label="${tool.name} on ${on_string} (Rscript)">
            <filter>"output_r_script" in include_outputs</filter>
        </data>
    </outputs>
    <help><![CDATA[
Automatically Parsed R Help
===========================

Title
-----

::
  
  Normalize Assay Data 

Name
----

::
  
  NormalizeData 

Alias
-----

::
  
  NormalizeData 

Description
-----------

::
  
  
   Normalize data for a given assay
   

Usage
-----

::
  
  
   NormalizeData(object, assay.type = "RNA",
     normalization.method = "LogNormalize", scale.factor = 10000,
     display.progress = TRUE)
   

Arguments
---------

::
  
  
   object Seurat object 
   
   assay.type Type of assay to normalize for (default is RNA), but can be
   changed for multimodal analyses. 
   
   normalization.method Method for normalization. Default is
   log-normalization (LogNormalize). More methods to be added very shortly. 
   
   scale.factor Sets the scale factor for cell-level normalization 
   
   display.progress display progress bar for scaling procedure. 
   

Value
-----

::
  
  
   Returns object after normalization. Normalized data is stored in data slot
   

Examples
--------

::
  
  
   pbmc_small
   pmbc_small <- NormalizeData(object = pbmc_small)
    ]]></help>
<tests>
    <test>
    </test>
</tests>
<citations>
</citations>
</tool>
<!-- Created automatically using R2-G2: https://github.com/blankenberg/r2g2 -->
